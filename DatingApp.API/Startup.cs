using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using DatingApp.API.Data;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace DatingApp.API
{
    public class Startup
    {
        // constructor which provides access to our configuration.
        public Startup(IConfiguration configuration) 
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add SERVICES to the container. Dependency injection container.
        public void ConfigureServices(IServiceCollection services)
        {
            //tell application about this. if we add this as a service it will be able to be injected into any part of our application.
            services.AddDbContext<DataContext>(x => x.UseSqlite(Configuration.GetConnectionString("DefaultConnection")));
            
            // This gives us access to routing functionality, this way client will be able to connect to our api.
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2); //2.2 runtime
            
            // This is how we will allow our client application to accept access to our API. Else we will get error in console 'Access-Control-Allow-Origin'.
            services.AddCors();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        // As requests come into api it goes through this pipeline, if we need to modify this request or manipulate it we can do so here through middleware.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                //gives a developer friendly page on whats gone wrong.
                app.UseDeveloperExceptionPage();
            }
            else
            {
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                // security feature which tells browser, when we return a response, if https is used return https and only use https.
                // app.UseHsts();
            }
            // In this expression we will define what we will allow and send back as our headers.
            app.UseCors(x => x.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());

            // app.UseHttpsRedirection(); // dont want to deal with Self Signed Certificates for now while developing.

            // middleware - software that connects network based requests generated by a client to the backend data that the client is requesting.
            // this "UseMvc" sits between the request and the api endpoint and it will route the request to the correct controller.
            app.UseMvc();
        }
    }
}
